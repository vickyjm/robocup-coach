This are the messages that an online coach can send to the players:

(init TEAMNAME (version VERSION))
	-TEAMNAME has to be specified to indicate wich team the coach belongs to.
	-The coach must connect after at least one player from its team.
	-The default port for the coach is 6002.
	-This command is implemented in CoachInitCommand::CoachInitCommand from librcsc coach_command.cpp file.

(change_player_type UNUM PLAYER_TYPE)
	-This command can be used to change the heterogeneous player type (digit between 0 and 6, 0 is the default type).
	-This message is represented by SampleCoach::doSubstitute in agent2d-3.1.1/src/sample_coach.cpp. This function uses
	 CoachAgent::doChangePlayerType from librcsc coach_agent.cpp file and CoachChangePlayerTypesCommand::CoachChangePlayerTypesCommand
	 from librcsc coach_command.cpp file.

(look)
	-This command provides information about the positions of the left and right goals, the ball and the active players.
	-This message is represented by CoachAgent::doLook function in coach_agent.cpp.

(eye MODE)
	-MODE must be one of on and off. If (eye on) is sent, the server starts sending information every 100ms. 
	-Agent2D uses a variable "use_eye" for this in the agent2d-3.1.1/src/coach.conf file
	-This message is represented by CoachAgent::doEye function in coach_agent.cpp.

(team_names)
	-This command makes the coach receive information about the names of both teams and which side they are playing on.
	-This message is represented in CoachAgent::doTeamNames in coach_agent.cpp.

(team_graphic (X Y "XPM line"..."XPM line"))
	-The coach can send teams-graphics as 256x64 XPM to the server. Each team_graphic-command sends a 8x8 tile. X and Y are
	 the coordinates of this tile,so they range from 0 to 31 and 0 to 7 respectively. Each XPM line is a line from the 8x8 XPM tile.
	-This message is represented by SampleCoach::sendTeamGraphic in agent2d-3.1.1/src/sample_coach.cpp
	-This is also implemented by CoachAgent::doTeamGraphic in coach_agent.cpp 

This are the messages that the coach can receive from the server:
*If the client chooses to receive visual information in each cycle by sending (eye on) it will receive messages in the following format:
(see global(OBJ1 OBJDESC1 )(OBJ2 OBJDESC2 ) . . .)
	-The description (OBJDESC) has the following form:
		->For goals: X Y
		->For the ball: X Y DELTA_X DELTA_Y
		->For players: X Y DELTA_X DELTA_Y BODYANGLE NECKANGLE [POINTING_DIRECTION]
This messages are analyzed in CoachAgent::Impl::analyzeSeeGlobal in coach_agent.cpp

*If the client wants to receive auditory information and sent (ear on) to the server (this is also in coach.conf), it will 
receive all auditory information, from both referees and all of the players. There are two kinds of hear messages:
(hear TIME referee MESSAGE)
	-For all referee messages, such as "play_on" and "free_kick_left".
(hear TIME (p ”TEAMNAME” NUM) ”MESSAGE”)
	-For all players messages.
This messages are analyzed in CoachAgent::Impl::analyzeHear in coach_agent.cpp



Communication with the players:
-"Freeform" messages are alphanumeric (plus the symbols ().+*/?<>_) short messages (128 chars) that the coach can send when 
 the play-mode is not "play_on" or every 600 cycles of "play_on" for 20 cycles.
 	-> This messages are implemented in CoachAgent::doSayFreeform in coach_agent.cpp file.
 	-> The parser for this command is in freeform_parser.cpp file from librcsc, but it is only used for setting in our model the player's type
 		of the opponent.
-The coach can send say_coach_cnt_max freeform messages per game. If the game continues into extended time, the coaches are 
 given an additional say_coach_cnt_max messages to say every 6000 cycles.


Changing player types:
-Using the change_player_type-command the online coach can change player types unlimited times in "before_kick_off" play-mode.
 After kick-off player types can be changed three times during play-modes that are not "play_on".
-A player client will be informed about substitutions that occurred before the client connected by the message (change_player_type UNUM TYPE)
 for substitutions in it own team and (change_player_type UNUM) for substitutions in the opponent team.

* Extra stuff :
Saturday 30/04/16 :

- There is a rcsc::FreeformParser that according to the library is the "coach's freeform message parser", maybe it can be used to parse the messages?. Although it specifies that it's the coach's parser and not the players. http://rctools.osdn.jp/doc/librcsc-4.1.0/dd/d1f/classrcsc_1_1FreeformParser.html

- There is also a rcsc::SayMessageParser that according to the library is the "Abstract player's say message parser" that might be
useful too. But I think the SayMessage is different from the Freeform one. http://rctools.osdn.jp/doc/librcsc-4.1.0/df/ddc/classrcsc_1_1SayMessageParser.html.

- In rcsc::BasicClient there is a method rcsc::BasicClient::recvMessage that receives a server message in the socket queue. Assuming the coach's freeform messages are sent to the server and from the server to the players, then this could be used
to receive them. Not sure how it works though. http://rctools.osdn.jp/doc/librcsc-4.1.0/da/de7/classrcsc_1_1BasicClient.html.

Saturday 07/05/16 :

- In librcsc/player/freeform_parser.cpp in function FreeformParser::parse, it compares the first 14 characters of the message sent vs the string "(player_types", meaning that at the moment the parser is only usable to parse messages indicating the player type of each player in the opposing team. Writing a cout at the beginning of this function prints on screen when a message is being parsed.

- In librcsc/player/audio_sensor.cpp there is a function parseCoachMessage that calls the parse function of the freeform Parser. There is also some stuff related to clang below that function call.

- Following the above mentioned function, there is a functon in librcsc/player/player_agent.cpp called PlayerAgent::Impl::analyzeHearOurCoach that calls the function parseCoachMessage. Then in that same file there's a function called PlayerAgent::Impl::analyzeHear that calls for analyzeHearOurCoach, analyzeHear is then called in that same file by PlayerAgent::parse. 

- In PlayerAgent::parse its indicated that, when calling this function, it'll compare the first few characters of the message being parsed in order to decide what to do. If the first 6 characters are "(hear ", then this function will call analyzeHear.


Sunday 08/05/16:
THIS IS HOW THE MESSAGE PROCESSING SERVER WORKS
1.- [main_player.cpp|main_coach.cpp] Main program for the agents. Here is called the run() function from BasicClient.
	2.- The method "run" stays in an infinite loop while client can estimate that the server is alive. 
	3.- To handle a server message, select() is used. This is used for read the message using the socket.
	4.- When the message is received handleMessage() is called.
		If the agent is a Coach:
			5.- The handleMessage() function is in coach_agent.cpp file from librcsc.
			6.- This function calls parse() of the same file. 
				7.- The parse() function calls the respective analyzer depending on the type of message received. (Here are used all the analyzerBLABLA that we found earlier).
				8.- This function also executes something related to a (think) message. NOTE: Search this message in the manual. I don't remember what it does.
		If the agent is a Player:
			5.- The handleMessage() function is in player_agent.cpp file from librcsc.
			6.- This function calls parse() of the same file.
				7.-The parse() function calls the respective analyzer depending on the type of message received.
				8.- This function also executes something related to a (think) message.
		If the agent is a Trainer:
			The same of the other two types of agents. The functions are in trainer_agent.cpp