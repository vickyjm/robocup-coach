Detalles importantes para el uso del equipo:
Modificar el archivo agent2d-3.1.1/Makefile de la siguiente forma:
	Agregar `pkg-config --cflags opencv` a la variable CPPFLAGS y `pkg-config --libs opencv` a la variable LIBS.
Hacer los mismos cambios en el archivo librcsc-4.1.0/rcsc/coach/Makefile.

Si no se quieren usar los árboles de acciones en los jugadores:
	-> Comentar todas las líneas donde se usen los árboles de OpenCV en la función Bhv_BasicOffensiveKick::execute 
	   del archivo agent2d-3.1.1/src/bhv_basic_offensive_kick.cpp 
	-> Comentar todas las líneas donde se usen los árboles de OpenCV en la función Bhv_StrictCheckShoot::execute 
	   del archivo agent2d-3.1.1/src/chain_action/bhv_strict_check_shoot.cpp 
	-> Comentar todas las líneas donde se usen los árboles de OpenCV en la función Bhv_ChainAction::execute
	   del archivo agent2d-3.1.1/src/chain_action/bhv_chain_action.cpp 

Si se quieren usar los árboles de acciones:
	En el directorio src/trainedTrees se encuentran los árboles para los equipos WrightEagle, Jaeger, Genius, Helios y Hermes.
	Cada árbol fue entrenado con partidos entre nuestro equipo y el oponente seleccionado, más los partidos generados entre
	el oponente seleccionado contra los otros 4.

	1.- Caso en que los árboles del oponente a enfrentarse ya están entrenados:
		-> Se deben cambiar todos los paths de los árboles de pases y dribles en las llamadas a la función load de OpenCV en la
		   función Bhv_BasicOffensiveKick::execute del archivo agent2d-3.1.1/src/bhv_basic_offensive_kick.cpp 
		-> Se deben cambiar todos los paths del árbol de tiros al arco en las llamadas a la función load de OpenCV en la función
		   Bhv_StrictCheckShoot::execute ddel archivo agent2d-3.1.1/src/chain_action/bhv_strict_check_shoot.cpp
		-> Se deben cambiar todos los paths de los árboles de pases, dribles y tiros al arco en las llamadas a la función load de
		   OpenCV en la función Bhv_ChainAction::execute del archivo agent2d-3.1.1/src/chain_action/bhv_chain_action.cpp

	2.- Caso en que los árboles del oponente a enfrentarse no existen:
		-> Generar los logs de los partidos con los que se desea entrenar, pasarlos por el archivo preprocessingLogs.py y con los
		   archivos obtenidos generar los árboles de pases, dribles y tiros al arco.
		-> Luego, ir al caso 1.

	3.- Caso en que se quiere usar el coach para re-entrenar los árboles durante el partido:
		-> Si se desea cambiar el momento en que se re-entrenan los árboles debe cambiarse la condición del gameMode en la función
		   CoachAgent::handleMessage del archivo librcsc-4.1.0/rcsc/coach/coach_agent.cpp y volver a compilar la librería.
		-> Cambiar los paths de los archivos .dats temporales, que deben contener los datos con los que fueron entrenados los árboles,
		   en la función CoachAgent::extractFeatures del archivo librcsc-4.1.0/rcsc/coach/coach_agent.cpp. Estos .dats deben ser eliminados
		   después de cada partido para no generar desbalance en las clases de los árboles, y deben ser reemplazados por una copia de los
		   .dats con los que se entrenaron los mismos.

	4.- Caso en que no se quiere re-entrenar los árboles durante el partido:
		-> Comentar todas las líneas de la función CoachAgent::handleMessage relacionadas con la extracción de las acciones, features y 
	       entrenamiento de los árboles en el archivo librcsc-4.1.0/rcsc/coach/coach_agent.cpp.



// Cosas de Estrategias y Formaciones :
- En agent2d-3.1.1/src/sample_player.cpp en la funcion SamplePlayer::actionImpl() se hace un 
Strategy::instance().update( world() ), esto, en agent2d-3.1.1/src/strategy.cpp llama al metodo update, el cual procede a llamar a updateSituation y updatePosition del mismo archivo. updateSituation primero verifica si hay un penalty, de serlo, modifica la situation para que los jugadores hagan lo que tienen que hacer. Si no es penalty, encuentra primero la minima cantidad de ciclos para que el jugador llegue a la pelota sin gastar toda su stammina, calcula tambien la minima cantidad de ciclos para que alguno de sus companeros de equipo llegue a la pelota sin gaster su stamina, y calcula lo mismo para los oponentes. Luego, tomando el minimo entre sus companeros y el mismo, verifica si la cantidad de ciclos minima para que su equipo llegue a la pelota es mayor que la del oponente o no. Si lo es, se dice que es una Defense_Situation, si no, se dice que es una Offense_Situation.

- En updatePosition, se llama a getFormation, que en base a la situacion obtenida en updateSituation y el estado del juego, modifica la formacion, utilizando una de las que estan en los archivos en agent2d-3.1.1/src/formations-dt, estas se leen al principio del partido y se tienen guardadas.

- Para cambiar el archivo de formacion del oponente, cambiar el archivo que se abre en getFormation en el archivo 
agent2d-3.1.1/src/strategy.cpp por el del equipo correspondiente.

- Para agregar nuevas formaciones para nuestro equipo :
	-> Crear el archivo de la formacion usando fedit2. Esto genera un .conf. 
	-> Colocar dicho .conf en la carpeta /agent2d-3.1.1/src/formations-dt/
	-> En el archivo /agent2d-3.1.1/src/strategy.h, colocar despues de "public:" una variable de la forma :
	static const std::string (NOMBRE DE LA FORMACION)_CONF. (En mayusculas para mantener la forma)
	-> En el mismo archivo, bajar un poco hasta el comentario de //formations y crear una variable de la forma :
	rcsc::Formation::Ptr M_(nombre de la formacion)_formation.
	-> En el archivo /agent2d-3.1.1/src/strategy.cpp despues del namespace, colocar 
	const std::string Strategy::(NOMBRE DEL CONF DECLARADO ANTES) = "(nombre del archivo .conf real, con extension y todo)"
	-> En el mismo archivo, en la funcion read colocar un bloque de codigo de la forma :
	M_(nombre formacion)_formation = readFormation("./formations-dt/" + (NOMBRE DEL CONF DECLARADO ANTES));
    if (! M_(nombre formacion)_formation )
    {
        std::cerr << "Failed to read (nombre formacion) formation" << std::endl;
        return false;
    }
    -> A partir de este punto, se puede usar la formacion colocando en la funcion getFormation, en el switch (M_current_situation), se colocan las condiciones que se consideran necesarias para adoptar una formacion dada, y se coloca un return M_(nombre formacion)_formation. Por ejemplo :

    switch ( M_current_situation ) {
        case Defense_Situation:
        	if (offense == 4) {
        		return defense_442_formation;
        	}
            return M_defense_formation;
        case Offense_Situation:
            return M_offense_formation;
        default:
            break;
    }

    Suponiendo q en el ejemplo, defense_442_formation es nuestra formacion creada. offense,center y defense son variables que contienen la cantidad de delanteros,defensas y medio campistas del equipo oponente segun se obtuvo en el proceso de obtener la formacion realizado antes del partido, o en el transcurso del mismo.



##### Cosas respecto a sustituciones / cambios ############3

- En los archivos de librcsc los nombres de los roles salen solo cuando los crean.
- En los archivos del equipo solo aparecen en strategy.cpp en RoleFactory
- sample_coach.cpp tiene un metodo GetFastestType que devuelve el tipo de jugador mas rapido...pero estos tipos de jugadores
	no se si estan asociados a los roles de fedit...hay 17 tipos de jugador, y ninguno tiene nombre especifico,solo un id que es un numero de 1 a 17.
- En sample_coach.cpp estan como comentario los roles en la funcion DoFirstSubstitute
- strategy.cpp tiene un exchangeRole(x,y) que intercambia el rol (el rol segun fedit) de los dos jugadores que le pases.
- fedit y sus formaciones parecen estar desligados del equipo en si. (?)
- Estos son los stats de los distintos tipos :

						id speed step inc  power  stam  karea
						 0 1.000   6  45.0 100.0  55.0  1.085
						 1 0.948   6  44.5 100.0  55.5  1.143
						 2 0.980   5  42.0 100.0  58.0  1.160
						 3 1.039   6  43.0 100.0  57.0  1.038
						 4 0.784   5  47.6 100.0  52.4  1.166
						 5 1.008   6  42.8 100.0  57.2  1.051
						 6 1.018   5  41.0 100.0  59.0  1.085
						 7 0.934   7  49.1 100.0  50.9  1.003
						 8 0.892   7  51.4 100.0  48.6  1.119
						 9 0.962   7  47.2 100.0  52.8  1.042
						 10 0.793   5  46.7 100.0  53.3  1.060
						 11 0.789   5  42.9 100.0  57.1  1.030
						 12 0.760   5  51.9 100.0  48.1  1.021
						 13 0.859   6  51.7 100.0  48.3  1.120
						 14 0.786   5  44.6 100.0  55.4  1.121
						 15 0.981   6  42.2 100.0  57.8  1.137
						 16 0.869   5  44.8 100.0  55.2  0.995
						 17 0.927   6  44.4 100.0  55.6  1.112

- Y estos son los mensajes que da el coach al principio del partido. 

						JEMV coach: change player 1 to type 0
						JEMV coach: change player 11 to type 3
						JEMV coach: change player 2 to type 6
						JEMV coach: change player 3 to type 5
						JEMV coach: change player 10 to type 2
						JEMV coach: change player 9 to type 15
						JEMV coach: change player 6 to type 9
						JEMV coach: change player 4 to type 1
						JEMV coach: change player 5 to type 17
						JEMV coach: change player 7 to type 7
						JEMV coach: change player 8 to type 8

- Y estos son los roles que da Fedit :
						
						1  ----- Goalie
						2  ----- CenterBack
						3  ----- CenterBack
						4  ----- SideBack
						5  ----- SideBack
						6  ----- DefensiveHalf
						7  ----- OffensiveHalf
						8  ----- OffensiveHalf
						9  ----- SideForward
						10 ----- SideForward
						11 ----- CenterForward 



