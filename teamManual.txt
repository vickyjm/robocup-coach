Detalles importantes para el uso del equipo:
Modificar el archivo agent2d-3.1.1/Makefile de la siguiente forma:
	Agregar `pkg-config --cflags opencv` a la variable CPPFLAGS y `pkg-config --libs opencv` a la variable LIBS.
Hacer los mismos cambios en el archivo librcsc-4.1.0/rcsc/coach/Makefile.

Si no se quieren usar los árboles de acciones en los jugadores:
	-> Comentar todas las líneas donde se usen los árboles de OpenCV en la función Bhv_BasicOffensiveKick::execute 
	   del archivo agent2d-3.1.1/src/bhv_basic_offensive_kick.cpp 
	-> Comentar todas las líneas donde se usen los árboles de OpenCV en la función Bhv_StrictCheckShoot::execute 
	   del archivo agent2d-3.1.1/src/chain_action/bhv_strict_check_shoot.cpp 
	-> Comentar todas las líneas donde se usen los árboles de OpenCV en la función Bhv_ChainAction::execute
	   del archivo agent2d-3.1.1/src/chain_action/bhv_chain_action.cpp 

Si se quieren usar los árboles de acciones:
	En el directorio src/trainedTrees se encuentran los árboles para los equipos WrightEagle, Jaeger, Genius, Helios y Hermes.

	1.- Caso en que los árboles del oponente a enfrentarse ya están entrenados:
		-> Se deben cambiar todos los paths de los árboles de pases y dribles en las llamadas a la función load de OpenCV en la
		   función Bhv_BasicOffensiveKick::execute del archivo agent2d-3.1.1/src/bhv_basic_offensive_kick.cpp 
		-> Se deben cambiar todos los paths del árbol de tiros al arco en las llamadas a la función load de OpenCV en la función
		   Bhv_StrictCheckShoot::execute ddel archivo agent2d-3.1.1/src/chain_action/bhv_strict_check_shoot.cpp
		-> Se deben cambiar todos los paths de los árboles de pases, dribles y tiros al arco en las llamadas a la función load de
		   OpenCV en la función Bhv_ChainAction::execute del archivo agent2d-3.1.1/src/chain_action/bhv_chain_action.cpp

	2.- Caso en que los árboles del oponente a enfrentarse no existen:
		-> Generar los logs de los partidos con los que se desea entrenar, pasarlos por el archivo preprocessingLogs.py y con los
		   archivos obtenidos generar los árboles de pases, dribles y tiros al arco.
		-> Luego, ir al caso 1.

	3.- Caso en que se quiere usar el coach para re-entrenar los árboles durante el partido:
		-> Si se desea cambiar el momento en que se re-entrenan los árboles debe cambiarse la condición del gameMode en la función
		   CoachAgent::handleMessage del archivo librcsc-4.1.0/rcsc/coach/coach_agent.cpp y volver a compilar la librería.
		-> Cambiar los paths de los archivos .dats temporales, que deben contener los datos con los que fueron entrenados los árboles,
		   en la función CoachAgent::extractFeatures del archivo librcsc-4.1.0/rcsc/coach/coach_agent.cpp. Estos .dats deben ser eliminados
		   después de cada partido para no generar desbalance en las clases de los árboles, y deben ser reemplazados por una copia de los
		   .dats con los que se entrenaron los mismos.

	4.- Caso en que no se quiere re-entrenar los árboles durante el partido:
		-> Comentar todas las líneas de la función CoachAgent::handleMessage relacionadas con la extracción de las acciones, features y 
	       entrenamiento de los árboles en el archivo librcsc-4.1.0/rcsc/coach/coach_agent.cpp.



// Cosas de Estrategias y Formaciones :
- En agent2d-3.1.1/src/sample_player.cpp en la funcion SamplePlayer::actionImpl() se hace un 
Strategy::instance().update( world() ), esto, en agent2d-3.1.1/src/strategy.cpp llama al metodo update, el cual procede a llamar a updateSituation y updatePosition del mismo archivo. updateSituation primero verifica si hay un penalty, de serlo, modifica la situation para que los jugadores hagan lo que tienen que hacer. Si no es penalty, encuentra primero la minima cantidad de ciclos para que el jugador llegue a la pelota sin gastar toda su stammina, calcula tambien la minima cantidad de ciclos para que alguno de sus companeros de equipo llegue a la pelota sin gaster su stamina, y calcula lo mismo para los oponentes. Luego, tomando el minimo entre sus companeros y el mismo, verifica si la cantidad de ciclos minima para que su equipo llegue a la pelota es mayor que la del oponente o no. Si lo es, se dice que es una Defense_Situation, si no, se dice que es una Offense_Situation.

- En updatePosition, se llama a getFormation, que en base a la situacion obtenida en updateSituation y el estado del juego, modifica la formacion, utilizando una de las que estan en los archivos en agent2d-3.1.1/src/formations-dt, estas se leen al principio del partido y se tienen guardadas.

- Para cambiar el archivo de formacion del oponente, cambiar el archivo que se abre en getFormation en el archivo 
agent2d-3.1.1/src/strategy.cpp por el del equipo correspondiente.


